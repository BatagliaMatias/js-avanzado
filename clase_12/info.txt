npm i -S react react-dom

1 - La variable React siempre tiene que estar en scope
2 - Los componentes son la expresion minima de UI y son funciones en mayusucula y tienen retorno de tipo : String - Nodo - React.Component

    let App = () => { return "Hola" }

    function App() { return "Hola" }

    class App {}
    

3- Para mostrar un componente se usa JSX
4- Cada componente puede tener su propio estado(state) o recibir parametros(props) y si estos cambian se vuelve a ejecutar el metodo render. Los unicos componentes que tienen estado son los de tipo Class y solo se puede modificar por el mismo componente y todos los componentes reciben props PERO son de read-only
5 - Los props pueden ser de tipo : String - Boolean(default) - JS Expression y se escriben en formato JSX : 

    Foo({
        x:"hola",
        y:true,
        z:()=>{}
    })

    <Foo  x="Hola" y z={()=>{}} />



React Router Dom

BrowserRouter : History API 
HashRouter : location.hash
MemoryRouter : para navegadores sin History ni hash
StaticRouter : SSR - Server Side Rendering 

Cualquier componente de la libreria react-router-dom NO SE PUEDE USAR si no es hijo de algun Router(los anteriores)


cada Route puede asociar un componente de vista con los props :


component : Componente no en JSX . Al copmonente ya le llegan los props history, location y match

children : fn() y adentro si puede ir JSX. A estos no le llegan directamente. 

render  : fn() y adentro si puede ir JSX. A estos no le llegan directamente. 


CONTEXT API : 

state / store : Es una funcion que nos da como retorno un Provider y un Consumer. 

Provider : Es un componente HOC que puede compartir estado a cualquier Consumer hijo en cualquier nivel de jerarquia.

Consumer : Es un componente HOC. Se usa como hijo de un Provider y puede acceder a cualquier estado del Provider en cualquier nivel de jerarquia. 



function primera(callback){
    let resultado = 1 + 1;
    callback()
}

function segunda(){
    for(i=0; i<1000000; i++){
        continue;
    }
}


primera(segunda)
primera(async ()=>{})


http://vulcanjs.org/
https://nestjs.com/
https://nextjs.org/
https://fusionjs.com/
https://www.meteor.com/


REDUX : Es una libreria aparte de React 

npm i -S redux  react-redux [middlewares]

CONCEPTOS DE REACT-REDUX: 

    Provider : Idem Provider en CONTEXT API - Sirve como componente HoC - Seedea todos los componentes hijos con el store, es decir que para poder consumir el store desde cualquier nivel inferior de componentes SI O SI necesitamos este componente. Toma como prop el mismo store(parametro). 


CONCEPTOS DE REDUX : 

    Store : Idem this.state . Es un objeto que va a mantener el estado centralizado de nuestra aplicacion. Se crea a partir de una funcion (createStore) que toma como parametro un REDUCER

    Reducer : Es una funcion pura (toma input y sin modificarlo, nos retorna un nuevo output). Esta funcion toma dos parametros : el estado anterior(desde donde se calcula el nuevo) y un ACTION. 

    (anteriorEstado = {} ,action)=>{
        //Aca voy a calcular cual va a ser el proximo estado de la aplicacion utilizando anteriorEstado
        switch(action.type){
            
            default : 
                return anteriorEstado
        }
    }

    Actions : Es una funcion pura que TIENE que retornar un objeto de manera SINCRONICA el cual se va a pasar automaticamente como el segundo parametro del/de los reducer/s - Es analogo a un callback de evento. 

    ()=>{ return {type:""} }

    ó así : 

    ()=> ({type : ""})


CONECTAR UN COMPONENTE CON REDUX : 

Para conectar un componente necesitamos usar la funcion connect. Tambien es un HoC pero se escribe como connect()(Componente)

La funcion connect puede tomar dos parametros : Uno para traer el store y otro para "traer" los actions. Sea lo que sea que vayamos a conectar, al componente le va a llegar como props. Ambos parametros son funciones.  


    1) Si el componente solo necesita store : Solo necesitamos un solo parametro y solo necesitamos un import

    2) Si el componente necesita store + actions : necesitamos tres imports y dos parametros